# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-no-accent2
post.description = Exemple d'utilisation d'une fonction adhoc
post.summary = Récupération à partir d'un tableau d'objets avec à minima un champ value contenant une chaine de caractère
post.tags.0 = base-line-python
post.requestBody.content.application/json.example.0.id = 1
post.requestBody.content.application/json.example.0.value = école
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.example.0.id = 1
post.responses.default.content.application/json.example.0.value = ecole
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Les accents dans le champ value sont supprimés
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean

[use]
plugin = @ezs/spawn
plugin = @ezs/analytics
plugin = @ezs/basics

[JSONParse]
separator = *

# expand is the easiest way to optimize your script. It allows to parallelize batch processing
[expand]
path = value
size = 100
# in production mode, uncomment the following line
# cache = boost

[expand/exec]
# command should be executable !
command = ./v1/no-accent.py

[JSONString]
indent = env('indent')

