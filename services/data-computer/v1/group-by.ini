# Entrypoint output format
mimeType = application/json

# OpenAPI Documentation - JSON format (dot notation)
post.operationId = post-v1-group-by
post.summary = Groupe les identifiants en fonction d'une même valeur
post.description = Pour chaque identifiant donné, on obtient la liste de tous les identifiants ayant la même valeur
post.tags.0 = data-computer
post.requestBody.content.application/x-gzip.schema.type = string
post.requestBody.content.application/x-gzip.schema.format = binary
post.requestBody.content.application/x-tar.schema.type = string
post.requestBody.content.application/x-tar.schema.format = binary
post.requestBody.required = true
post.responses.default.description = Informations permettant de récupérer les données le moment venu
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean
post.parameters.1.description = URL pour signaler que le traitement est terminé
post.parameters.1.in = header
post.parameters.1.name = X-Webhook-Success
post.parameters.1.schema.type = string
post.parameters.1.schema.format = uri
post.parameters.1.required = false
post.parameters.2.description = URL pour signaler que le traitement a échoué
post.parameters.2.in = header
post.parameters.2.name = X-Webhook-Failure
post.parameters.2.schema.type = string
post.parameters.2.schema.format = uri
post.parameters.2.required = false

[env]
path = generator
value = group-by

[use]
plugin = basics
plugin = analytics

# Step 1 (générique): Charger le fichier corpus
[delegate]
file = charger.cfg

# Step 1.1 (spécifique): Controle du premier element en supposant que les autres lui ressemblent
[singleton]
[singleton/validate]
path = id
rule = required

path = value
rule = required

# Step 2 (générique): Traiter de manière asynchnore les items reçus
[fork]
standalone = true
logger = logger.cfg

# Step 2.1 (spécifique): Lancer un calcul sur tous les items reçus
[fork/delegate]

# Step 2.1.1 (spécifique): On regroupe en utilisant le champ value (inversion nécessaire car id contient l'identifiant du document)
[fork/delegate/groupingByEquality]
id = value
value = id

# Step 2.1.2 (spécifique): On donne la même valuer à id et value (on oubli la valeur ayant permis le regroupement)
[fork/delegate/assign]
path = id
value = get('value')

# Step 2.1.3 (spécifique): On crée des pairs deux à deux entre tous les identifiants regroupés
[fork/delegate/pair]
path = id
path = value

# Step 2.1.3 (spécifique): On crée des objets {id, value} avec les pairs
[fork/delegate/replace]
path = id
value = get('id').first()
path = value
value = get('id').last()

# Step 2.1.3 (spécifique): On aggrége le tout
[fork/delegate/aggregate]

[fork/transit]

# Step 2.2 (générique): Enregister le résulat et signaler que le traitment est fini
[fork/delegate]
file = recorder.cfg

# Step 3 : Renvoyer immédiatement un seul élément indiquant comment récupérer le résulat quand il sera prêt
[delegate]
file = recipient.cfg

