# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-teeft-graph
post.description = Web service qui prend en entrée un corpus istex et qui renvoie un graph de mots clés des documents sous format GEXF et/ou PNG
post.summary = Web service qui prend en entrée un corpus istex et qui renvoie un graph de mots clés des documents sous format GEXF et/ou PNG
post.tags.0 = data-graph
post.requestBody.content.application/x-tar.schema.type = string
post.requestBody.content.application/x-tar.schema.format = binary
post.requestBody.required = true
post.responses.default.description = Informations permettant de récupérer les données le moment venu
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean
post.parameters.1.description = URL pour signaler que le traitement est terminé
post.parameters.1.in = header
post.parameters.1.name = X-Webhook-Success
post.parameters.1.schema.type = string
post.parameters.1.schema.format = uri
post.parameters.1.required = false
post.parameters.2.description = URL pour signaler que le traitement a échoué
post.parameters.2.in = header
post.parameters.2.name = X-Webhook-Failure
post.parameters.2.schema.type = string
post.parameters.2.schema.format = uri
post.parameters.2.required = false
post.parameters.3.in = query
post.parameters.3.name = thresh_edge
post.parameters.3.schema.type = string
post.parameters.3.description = Seuil (en nombre d'apparitions) à partir du quel on affiche les arêtes (auto pour automatique, n'importe quel entier supérieur ou égal à 1 sinon)
post.parameters.4.in = query
post.parameters.4.name = thresh_node
post.parameters.4.schema.type = string
post.parameters.4.description = Seuil (en nombre d'apparitions) à partir du quel on affiche les noeuds (auto pour automatique, n'importe quel entier supérieur ou égal à 1 sinon)


[env]
path = generator
value = teeft-graph

[use]
plugin = basics
plugin = spawn

# Step 1 (générique): Charger le fichier corpus
[delegate]
file = charger.cfg

[fork]
standalone = true
logger = logger.cfg

[fork/assign]
path = value
value = get("value", [])

[fork/expand]
path = value
size = 100

[fork/expand/URLConnect]
url  = https://terms-extraction.services.istex.fr/v1/teeft/en
noerror = true
timeout = 1000000

# Step 2.1 (spécifique): Lancer un calcul sur tous les items reçus
[fork/exec]
# command should be executable !
command = ./v1/graph.py
args = fix('-p')
args = env('thresh_edge', "auto")
args = fix('-q')
args = env('thresh_node', "auto")

# Step 2.2 (générique): Enregistrer le résultat et signaler que le traitement est fini
[fork/delegate]
file = recorder.cfg

# Step 3 : Renvoyer immédiatement un seul élément indiquant comment récupérer le résultat quand il sera prêt
[delegate]
file = recipient.cfg
