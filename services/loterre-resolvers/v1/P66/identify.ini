# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-P66-identify
post.description = Associer des termes au vocabulaire Loterre correspondant - https://skosmos.loterre.fr/P66/fr/ (Thésaurus Mémoire)
post.summary = verbalisation à partir d'un tableau d'objets avec à minima un champ value contenant des termes
post.tags.0 = loterre-resolvers
post.requestBody.content.application/json.example.0.id = 1
post.requestBody.content.application/json.example.0.value = amygdala
post.requestBody.content.application/json.example.1.id = 2
post.requestBody.content.application/json.example.1.value = frontal lobe
post.requestBody.content.application/json.example.2.id = 3
post.requestBody.content.application/json.example.2.value = metamemory
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.example.0.id = 1
post.responses.default.content.application/json.example.0.value = {...}
post.responses.default.content.application/json.example.1.id = 2
post.responses.default.content.application/json.example.1.value = {...}
post.responses.default.content.application/json.example.2.id = 3
post.responses.default.content.application/json.example.2.value = {...}
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Les prefixes DOI en verion textuel
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean

[delegate]
file = ./v1/P66.cfg

[delegate]
file = ./v1/process.cfg

[swing]
test = get('value').isObject()
[swing/replace]

# id field is required in order to work with lodex
path = id
value = get('id')

path = value.about
value = get('value.rdf$about')

path = value.prefLabel@fr
value = get('value.skos$prefLabel').filter(y => (y.xml$lang === 'fr')).map(x => x.xml$t).shift()

path = value.prefLabel@en
value = get('value.skos$prefLabel').filter(y => (y.xml$lang === 'en')).map(x => x.xml$t).shift()

path = value.localization@en
value =  get('value.localization').map((x) => x.skos$prefLabel.filter(y => (y.xml$lang === 'en')).map(x => x.xml$t).shift())

path = value.localization@fr
value =  get('value.localization').map((x) => x.skos$prefLabel.filter(y => (y.xml$lang === 'fr')).map(x => x.xml$t).shift())

[delegate]
file = ./v1/send.cfg
