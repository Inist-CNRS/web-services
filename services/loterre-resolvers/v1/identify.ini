# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-identify
post.summary = Identifiants à partir d'un tableau de termes.
#'
post.description = Renvoie les identifiants des objets du vocabulaire [Loterre](https://www.loterre.fr) correspondant à partir d'un tableau de termes.
post.tags.0 = loterre-resolvers
post.requestBody.description = Tableau d'objets avec *a minima* un champ `value` contenant des termes.
#'
post.requestBody.required = true
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Les informations contenues dans le vocabulaire choisi.
# Paramètres
post.parameters.0.description = Identifiant du vocabulaire à utiliser (ex: `9SD`).
post.parameters.0.in = query
post.parameters.0.name = loterreID
post.parameters.0.schema.type = string
post.parameters.0.schema.default = 9SD
post.parameters.0.required = true
post.parameters.1.description = Indenter le JSON résultant.
post.parameters.1.in = query
post.parameters.1.name = indent
post.parameters.1.schema.type = boolean

# Example
post.requestBody.content.application/json.example.0.value = CAN
post.requestBody.content.application/json.example.1.value = N'importe quoi
#'
post.responses.default.content.application/json.example.0.value.about = http://data.loterre.fr/ark:/67375/9SD-QDWJ08N6-7
post.responses.default.content.application/json.example.0.value.prefLabel$fr = Canada
post.responses.default.content.application/json.example.0.value.prefLabel$en = Canada
post.responses.default.content.application/json.example.0.value.latitude = 57.7487688035733
post.responses.default.content.application/json.example.0.value.longitude = -101.569822125212
post.responses.default.content.application/json.example.1.value = n/a

[delegate]
file = ./v1/process.cfg

[swing]
test = get('value').isObject()

# Sélection de champs
[swing/replace]

# id field is required in order to work with LODEX
path = id
value = get('id')

path = value.id
value = get('value.id')

path = value.about
value = get('value.rdf$about')

path = value.prefLabel@fr
value = get('value.skos$prefLabel').filter(y => (y.xml$lang === 'fr')).map(x => x.xml$t).shift()
path = value.prefLabel@en
value = get('value.skos$prefLabel').filter(y => (y.xml$lang === 'en')).map(x => x.xml$t).shift()

path = value.latitude
value = get('value.geo$lat.xml$t')
path = value.longitude
value = get('value.geo$long.xml$t')

[delegate]
file = ./v1/send.cfg
