# Entrypoint output format
mimeType = application/json

# OpenAPI Documentation - JSON format (dot notation)
post.operationId = post-v1-clustering
post.summary = Crée différents `clusters` à partir d'un ensemble de textes courts ou d'un ensemble de listes de mots-clés.
post.description = Crée plusieurs groupe afin d'y classifier les différents textes en fonction de leur similarité.^M> - Le nombre de `cluster` est déterminé de manière automatique et des documents peuvent être considérés comme du bruit (dans ce cas précis, le label de leur cluster sera `0` ; les documents appartenant du cluster 0 ne sont pas regroupés ensembles).^M^M> - L'entrée peut être un texte court (type titre ou petit abstract), mais aussi une liste de mots-clés.
post.tags.0 = clustering
post.requestBody.content.application/x-gzip.schema.type = string
post.requestBody.content.application/x-gzip.schema.format = binary
post.requestBody.content.application/x-tar.schema.type = string
post.requestBody.content.application/x-tar.schema.format = binary
post.requestBody.required = true
post.responses.default.description = Informations permettant de récupérer les données le moment venu
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean
post.parameters.1.description = URL pour signaler que le traitement est terminé
post.parameters.1.in = header
post.parameters.1.name = X-Webhook-Success
post.parameters.1.schema.type = string
post.parameters.1.schema.format = uri
post.parameters.1.required = false
post.parameters.2.description = URL pour signaler que le traitement a échoué
post.parameters.2.in = header
post.parameters.2.name = X-Webhook-Failure
post.parameters.2.schema.type = string
post.parameters.2.schema.format = uri
post.parameters.2.required = false
post.parameters.3.in = query
post.parameters.3.name = nb
post.parameters.3.schema.type = number
post.parameters.3.description = Number of keywords returned

[env]
path = generator
value = clustering

[use]
plugin = basics
plugin = analytics
plugin = spawn

# Step 1 (générique): Charger le fichier corpus
[delegate]
file = charger.cfg

# Step 2 (générique): Traiter de manière asynchnore les items reçus
[fork]
standalone = true
logger = logger.cfg

# Step 2.1 (spécifique): Lancer un calcul sur tous les items reçus
[fork/exec]
# command should be executable !
command = ./v1/clustering.py
args = fix('-p')
args = env('nb',20)

# Step 2.2 (générique): Enregister le résulat et signaler que le traitment est fini
[fork/delegate]
file = recorder.cfg

# Step 3 : Renvoyer immédiatement un seul élément indiquant comment récupérer le résulat quand il sera prêt
[delegate]
file = recipient.cfg

