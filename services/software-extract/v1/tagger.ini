# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.summary = Extrait des noms de logiciels dans un texte écrit en anglais.
post.description = Extrait des noms de logiciels de textes écrits en anglais. Le modèle a été entraîné sur des articles scientifiques.
post.responses.default.description = Entités nommées de logiciels
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.requestBody.required = true
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean
post.parameters.0.description = Indent or not the JSON Result


# Examples
post.requestBody.content.application/json.example.0.value = This is a test text for the ner model. Model has to extract software such as BioImag Softr.
post.requestBody.content.application/json.example.1.value = An RNN-based model was designed using Python3 language with the PyTorch packages.
post.requestBody.content.application/json.example.2.value = There is no software in this sentence.
post.responses.default.content.application/json.example.0.value.SOFT.0 = BioImag Softr
post.responses.default.content.application/json.example.1.value.SOFT.0 = Python3
post.responses.default.content.application/json.example.1.value.SOFT.1 = PyTorch
post.responses.default.content.application/json.example.2.value.SOFT = []

[use]
plugin = @ezs/spawn
plugin = @ezs/basics

[JSONParse]
separator = *

[expand]
path = value
size = 10

[expand/exec]
# command should be executable !
command = ./v1/tagger.py

[dump]
indent = env('indent', false)
