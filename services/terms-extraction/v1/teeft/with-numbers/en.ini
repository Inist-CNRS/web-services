# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-teeft-with-numbers-en
post.requestBody.content.application/json.example.0.id = MPES-ERM_ER2023_000737
post.requestBody.content.application/json.example.0.value = Flow control based 5 MW wind turbine enhanced energy production for hydrogen generation cost reduction
post.requestBody.content.application/json.example.1.id = MPES-ERM_ER2023_001916
post.requestBody.content.application/json.example.1.value = Study on the Motion Characteristics of 10 MW Superconducting Floating Offshore Wind Turbine Considering 2nd Order Wave Effect
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.example.0.id = MPES-ERM_ER2023_000737
post.responses.default.content.application/json.example.0.value.0 = flow control
post.responses.default.content.application/json.example.0.value.1 = 5 mw wind turbine
post.responses.default.content.application/json.example.0.value.2 = energy production
post.responses.default.content.application/json.example.0.value.3 = hydrogen generation cost
post.responses.default.content.application/json.example.1.id = MPES-ERM_ER2023_001916
post.responses.default.content.application/json.example.1.value.0 = motion characteristics
post.responses.default.content.application/json.example.1.value.1 = 10 mw
post.responses.default.content.application/json.example.1.value.2 = offshore wind turbine
post.responses.default.content.application/json.example.1.value.3 = 2nd order wave
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Termes extraits du texte envoyé
post.summary = Extrait des termes du texte en anglais en utilisant Teeft prenant en compte les nombres
post.tags.0: terms-extraction
post.parameters.0.description = Nombre maximal de termes à récupérer
post.parameters.0.in = query
post.parameters.0.name = nb
post.parameters.0.required = false
post.parameters.0.schema.type = number
post.parameters.1.description = Indenter le JSON résultant
post.parameters.1.in = query
post.parameters.1.name = indent
post.parameters.0.required = false
post.parameters.1.schema.type = boolean

[use]
plugin = @ezs/basics
plugin = @ezs/teeft
plugin = @ezs/strings

[JSONParse]
separator = *

[encode]
path = value
from = 1
to = one
from = 2
to = two
from = 3
to = three
from = 4
to = four
from = 5
to = five
from = 6
to = six
from = 7
to = seven
from = 8
to = eight
from = 9
to = nine
from = 0
to = zero
prefix = inf
suffix = sup

[replace]
path = content
value = get('value')

path = path
value = get('id', 'n/a')

[TeeftToLowerCase]
path = content

[TeeftSentenceTokenize]
[TeeftTokenize]

[TeeftNaturalTag]
lang = en

[TeeftExtractTerms]
lang = en

[TeeftFilterTags]
lang = en

[TeeftRemoveNumbers]
[TeeftRemoveShortTerms]
[TeeftRemoveLongTerms]
[TeeftRemoveWeirdTerms]
[TeeftStopWords]
lang = en

[TeeftSumUpFrequencies]
[TeeftSpecificity]
lang = en
sort = true

[TeeftFilterMonoFreq]

[replace]
path = id
value = get('path')

path = value
value = get('terms').map('term').slice(0, env("nb", 5))

[map]
path = value

[map/decode]
from = 1
to = one
from = 2
to = two
from = 3
to = three
from = 4
to = four
from = 5
to = five
from = 6
to = six
from = 7
to = seven
from = 8
to = eight
from = 9
to = nine
from = 0
to = zero
prefix = inf
suffix = sup

[dump]
indent = env('indent', false)
