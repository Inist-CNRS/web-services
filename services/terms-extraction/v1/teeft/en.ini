# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-teeft-en
post.requestBody.content.application/json.example.0.id = 1
post.requestBody.content.application/json.example.0.value = That is an English-written text, which terms will be extracted thanks to the Teeft algorithm. The Teeft algorithm computes a specificity value for each term found in the text, and keeps only the most specific terms.
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.example.0.id = 1
post.responses.default.content.application/json.example.0.value.0 = teeft
post.responses.default.content.application/json.example.0.value.1 = teeft algorithm
post.responses.default.content.application/json.example.0.value.2 = english-written text
post.responses.default.content.application/json.example.0.value.3 = specificity value
post.responses.default.content.application/json.example.0.value.4 = specific terms
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Termes extraits du texte envoyé
post.summary = Extrait des termes du texte en anglais en utilisant Teeft
post.tags.0: terms-extraction
post.parameters.0.description = Nombre maximal de termes à récupérer
post.parameters.0.in = query
post.parameters.0.name = nb
post.parameters.0.required = false
post.parameters.0.schema.type = number
post.parameters.1.description = Indenter le JSON résultant
post.parameters.1.in = query
post.parameters.1.name = indent
post.parameters.0.required = false
post.parameters.1.schema.type = boolean

[use]
plugin = @ezs/basics
plugin = @ezs/teeft

[JSONParse]
separator = *

[replace]
path = content
value = get('value')

path = path
value = get('id', 'n/a')

[TeeftToLowerCase]
path = content

[TeeftSentenceTokenize]
[TeeftTokenize]

[TeeftNaturalTag]
lang = en

[TeeftExtractTerms]
lang = en

[TeeftFilterTags]
lang = en

[TeeftRemoveNumbers]
[TeeftRemoveShortTerms]
[TeeftRemoveLongTerms]
[TeeftRemoveWeirdTerms]
[TeeftStopWords]
lang = en

[TeeftSumUpFrequencies]
[TeeftSpecificity]
lang = en
sort = true

[TeeftFilterMonoFreq]

[replace]
path = id
value = get('path')

path = value
value = get('terms').map('term').slice(0, env("nb", 5))

[dump]
indent = env('indent', false)
