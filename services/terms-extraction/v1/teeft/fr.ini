# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-teeft-fr
post.requestBody.content.application/json.example.0.id = 1
post.requestBody.content.application/json.example.0.value = Pour faciliter l’accès aux techniques de fouille de données notamment pour les non spécialistes, le service TDM de l’Inist-CNRS développe des web services autour du traitement de l’information scientifique et technique. Ces services peuvent être appelés en ligne de commande ou au sein de LODEX, outil libre de visualisation. La démonstration montre comment, à partir des informations présentes dans une notice bibliographique et plus particulièrement à partir d’une adresse d’auteur, l’identifiant RNSR (Répertoire national des structures de recherche) est attribué automatiquement au document initial et comment cette nouvelle donnée est exploitée au sein de LODEX. Ainsi, programme ou algorithme développé par des enseignants chercheurs pourrait être adapté pour devenir un web service et être utilisé par le plus grand nombre.
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.example.0.id = 1
post.responses.default.content.application/json.example.0.value.0 = service tdm
post.responses.default.content.application/json.example.0.value.1 = web services
post.responses.default.content.application/json.example.0.value.2 = information scientifique
post.responses.default.content.application/json.example.0.value.3 = outil libre
post.responses.default.content.application/json.example.0.value.4 = informations présentes
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Termes extraits du texte envoyé
post.summary = Extrait des termes du texte en français en utilisant Teeft
post.tags.0: terms-extraction
post.parameters.0.description = Nombre maximal de termes à récupérer
post.parameters.0.in = query
post.parameters.0.name = nb
post.parameters.0.required = false
post.parameters.0.schema.type = number
post.parameters.1.description = Indenter le JSON résultant
post.parameters.1.in = query
post.parameters.1.name = indent
post.parameters.1.required = false
post.parameters.1.schema.type = boolean

[use]
plugin = @ezs/basics
plugin = @ezs/teeft

[JSONParse]
separator = *

[replace]
path = content
value = get('value')

path = path
value = get('id', 'n/a')

[TeeftToLowerCase]
path = content

[TeeftSentenceTokenize]
[TeeftTokenize]

[TeeftNaturalTag]
lang = fr

[TeeftExtractTerms]
lang = fr

[TeeftFilterTags]
lang = fr

[TeeftRemoveNumbers]
[TeeftRemoveShortTerms]
[TeeftRemoveLongTerms]
[TeeftRemoveWeirdTerms]
[TeeftStopWords]
lang = fr

[TeeftSumUpFrequencies]
[TeeftSpecificity]
lang = fr
sort = true

[TeeftFilterMonoFreq]

[replace]
path = id
value = get('path')

path = value
value = get('terms').map('term').slice(0, env("nb", 5))

[dump]
indent = env('indent', false)
