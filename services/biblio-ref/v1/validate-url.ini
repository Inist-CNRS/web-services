# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v1-validate-url
post.summary = Valide l'ensemble des références bibliographiques d'un PDF à partir de son URL
post.description =  Extrait les références bibliographiques d'un PDF à partir de son URL puis utilise crossref pour:^M- valider les références bibliographiques^M- donner les DOIs s'ils existent^M- indiquer les éventuelles références rétractées.
post.tags.0 = biblio-ref
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Le champ `value` est un tableau d'objets contenant les champs `doi`, `reference`, `url_pdf` et `status`.^M`status` prend plusieurs valeurs:^M- `found`si la référence est trouvée et valide,^M- `not_found` si elle est hallucinée ou non présente dans Crossref,^M- `retracted` si elle est rétractée. Indique les erreurs possibles `error_service` ou `error_data`.
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean

post.requestBody.content.application/json.example.0.id = 1
post.requestBody.content.application/json.example.0.value = https://cnrs.hal.science/hal-04461354/file/anki-gaillard-revol.pdf


[use]
plugin = @ezs/spawn
plugin = @ezs/basics

[JSONParse]
separator = *

[expand]
path = value
size = 1

[expand/exec]
# command should be executable !
command = ./v1/validate-url.py

[dump]
indent = env('indent', false)
