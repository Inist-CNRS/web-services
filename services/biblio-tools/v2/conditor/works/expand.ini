# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v2-conditor-works-expand
post.description = Récupération des métadonnées associées à un DOI dans Conditor
post.summary = Récupération à partir d'un tableau d'objets avec à minima un champ value contenant le DOI
post.tags.0 = biblio-tools
post.requestBody.content.application/json.example.0.id = 1
post.requestBody.content.application/json.example.0.value = 10.35562/arabesques.1222
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.example.0.id = 1
post.responses.default.content.application/json.example.0.value = { ... }
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Les prefixes DOI en version textuel
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean

# Necessary plugins
[use]
plugin = basics

# Flow configuration
[JSONParse]
separator = *

# Quelques paramètres modifiables si besoin
[env]
path = size
value = 10

path = indent
value = true

# Début du traitement par lot
[group]
size = env('size')

# Création d'une requete avec une liste d'identifiants
[replace]
path = output.0.q
value = self().map('value').filter(Boolean).map(JSON.stringify).join(' ').thru(allIdentifiers => `doi:(${allIdentifiers})`)

path = output.0.size
value = env('size')

path = output.0.envelope
value = false

path = input
value = self()

[map]
path = output

# Envoi de la requete
[map/URLStream]
url = https://corhal-api.inist.fr/mergedDocuments
json = true
path = .*
timeout = 30000
retries = 5
noerror = false

# Création d'un objet réponse
[map/replace]
path = id
value = get('doi').toLower()
path = value
value = self()

# Croisements des resultats et des dois
[exchange]
value = get('input').map((i) => ({ ...i, value:_.get(_.find(self.output, {id:i.value}), 'value') }))

# Fin du traitement par lot
[ungroup]

# On marque les réponses qui n'ont pas abouti
[swing]
test = has('value.sourceUids')
reverse = true

[swing/assign]
path = value
value = fix('n/a')

[dump]
indent = env('indent', false)
