# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.operationId = post-v2-hal-works-expandByHalId
post.description = Récupération des métadonnées associées à un halId dans HAL
post.summary = Récupération à partir d'un tableau d'objets avec à minima un champ value contenant le halId
post.tags.0 = biblio-tools
post.requestBody.content.application/json.example.0.id = 1
post.requestBody.content.application/json.example.0.value = hal-01831500
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.requestBody.required = true
post.responses.default.content.application/json.example.0.id = 1
post.responses.default.content.application/json.example.0.value = { ... }
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.responses.default.description = Les notices correspondantes en JSON
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean

# Necessary plugins
[use]
plugin = basics

# Flow configuration
[JSONParse]
separator = *

# Quelques paramètres modifiables si besoin
[env]
path = size
value = 10

path = indent
value = true

# Convert to uppercase WARNING do not use _.lowerCase() to avoid losing characters
[assign]
path = value
value = get('value').thru(x => typeof x === 'string' ? x.toLowerCase() : x)

# Début du traitement par lot
[group]
size = env('size')

# Création d'une requête avec une liste d'identifiants
#?q=halId_s:(hal-01831500)&wt=json&fl=label_xml
[replace]
path = output.0.q
value = self().map('value').filter(Boolean).map(JSON.stringify).join(' OR ').thru(allIdentifiers => `halId_s:(${allIdentifiers})`)

path = output.0.wt
value = json

path = output.0.fl
value = label_xml

path = output.0.rows
value = env('size')

path = input
value = self()

[map]
path = output

# Envoi de la requête
[map/URLStream]
url = https://api.archives-ouvertes.fr/search/
json = true
path = response.docs.*
timeout = 30000
retries = 5
noerror = false

# Création d'un objet réponse
[map/exchange]
value = get('label_xml')

[map/spawn]
[map/spawn/XMLParse]
separator = /TEI
[map/spawn/OBJFlatten]

[map/spawn/replace]
path = value
value = self()

[map/spawn/replace]
path = id
value = get('value.teiHeader/fileDesc/titleStmt/title/$t').split(" ").last()

path = value
value = get('value')

# Croisements des résultats et des halIds
[exchange]
value = get('input').map((i) => ({ ...i, value:_.get(_.find(self.output, {id:i.value}), 'value') }))

[debug]
text = après exchange

# Fin du traitement par lot
[ungroup]

# On marque les réponses qui n'ont pas abouti
[swing]
test = has('value.xmlns$hal')
reverse = true

[swing/assign]
path = value
value = fix('n/a')

# Prevents keys from containing the $ character (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('/')
safe = false

[exchange]
value = self().mapKeys((value, key) => key.replace(/\$/g, '_'))

[OBJFlatten]
separator = fix('/')
reverse = true
safe = false
# ...

[dump]
indent = env('indent', false)
