[debug]
path=url
text="-------- WELCOME to TermSuite WS - fr"

[use]
plugin = basics
plugin = spawn
# Choose a working directory

[env]
path = workingDirectory
value = /tmp/

[assign]
path = url
value =env('url')
path = topn
value =env('topn')

[debug]
path=url
text="WS:1/3 - TermSuite WS contacted "

# follow task 1
[assign]
path = task
value = validate_param
path = code
value = 2

# control parameter pass 
[validate]
path = url
rule = required|url
path = topn
rule = required|integer

[debug]
path=url
path=topn
text="WS:2/3 - Param url ok "

# follow task 1
[assign]
path = task
value = collect
path = code
value = 2

# run in background 
[fork]
standalone = true
# OUTPUT : { token: [ 'corpus0' ], status: 'file_append' }

# unzip zipfile and send a json object in the output stream for each file content
# WARNING : create a new stream 
#         : no path !
# OUTPUT {id: 'WtCWN5q5Y.txt',value: <Buffer ...
[fork/ZIPExtract]
path = fix("**/*.txt")

[fork/assign]
path = value
value = get("value").thru(buf => buf.toString())

# validate each content text file 
[fork/remove]
test = get('value').isEmpty()

# follow task 2
[fork/assign]
path = task
value = collect
path = code
value = 0

# give unique token
[fork/singleton]
[fork/singleton/identify]
path = token


# save file , filename is content of "id"(token)
[fork/spawn]
[fork/spawn/FILESave]
location = get('token').replace('uid:', '').replace(/\W+/,'').prepend(env('workingDirectory')).append('/corpus/')
identifier = get('id').replace('uid:', '').split('/').pop()
content = get('value')

# OUTPUT : {filename: '/tmp/corpus0/EamcmKzKZ.txt',...}
[fork/pop]

# replace the object by a object with the corpus name
[fork/replace] 
path = token
value = get('filename').split('/').at(2)

[fork/replace] 
path = token
value = get('token[0]')

# OUTPUT : { token: [ 'corpus0' ], status: 'file_append' }
# assign corpus field with the path corpus value
[fork/assign]
path = project
value = get('token').prepend(env('workingDirectory')).trim()

[fork/assign]
path = corpus
value = get('project').append('/corpus')

[fork/assign]
path = url
value = env('url')
path = language
value =fix('fr')
path = topn
value = env('topn')
path = file_result
value = get('token').append('_result.tsv')

# run terms extraction return path of the result as a object
[fork/exec]
command = ./extract.sh
concurrency = 0

# follow task 3
[fork/assign]
path = task
value = extract
path = code
value = 0

[keep]
path = token
path = url
path = language
path = topn
path = task
path = code
path = file_result

# in production mode, uncomment the following line
cache = boost

[pop]

[debug]
path=url
path=topn
text="WS:3/3 - Collect and extraction (fr) in progress with"

[JSONString]
indent = env('indent')
