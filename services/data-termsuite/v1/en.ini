# Entrypoint output format
mimeType = application/json

# OpenAPI Documentation - JSON format (dot notation)
post.operationId = post-v1-en
post.summary = Extraction des termes d'un fichier corpus en anglais
post.description = Procède à une extraction terminologique en langue anglaise sur un corpus de textes.  ^M^MLe fichier `.tar.gz` envoyé doit contenir des fichiers `.txt` en anglais.  ^M^Mℹ️ Voir [la commande Unix `tar`](https://tldr.inbrowser.app/pages/common/tar).
post.tags.0 = data-termsuite
post.requestBody.content.application/x-gzip.schema.type = string
post.requestBody.content.application/x-gzip.schema.format = binary
post.requestBody.required = true
post.responses.default.description = Informations permettant de récupérer les données le moment venu
post.parameters.0.description = Indenter le JSON résultant
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean
post.parameters.1.description = Nombre de termes à extraire
post.parameters.1.in = query
post.parameters.1.name = nb
post.parameters.1.schema.type = number
post.parameters.2.description = URL pour signaler que le traitement est terminé
post.parameters.2.in = header
post.parameters.2.name = X-Webhook-Success
post.parameters.2.schema.type = string
post.parameters.2.schema.format = uri
post.parameters.2.required = false
post.parameters.3.description = URL pour signaler que le traitement a échoué
post.parameters.3.in = header
post.parameters.3.name = X-Webhook-Failure
post.parameters.3.schema.type = string
post.parameters.3.schema.format = uri
post.parameters.3.required = false

post.responses.default.content.application/json.example.0.id = termsuite-en
post.responses.default.content.application/json.example.0.value = cEeFstsZi
#'

[use]
plugin = @ezs/spawn

[env]
path = generator
value = termsuite-en

# Step 1 (générique): Charger le fichier corpus
[delegate]
file = charger-txt.cfg

# Step 2 (générique): Traiter de manière asynchrone les items reçus
[fork]
standalone = true
logger = logger.cfg

# Step 2.0 (optionnel): Accélère le détachement du fork si l'enrichissement est lent
[fork/delegate]
file = buffer.cfg

[fork/debug]
text = fix('Before processing', env('generator'), 'for', env('identifier')).join(' ')

# Step 2.1 (spécifique): Lancer un calcul sur tous les items reçus
[fork/exec]
# command should be executable!
command = ./v1/extract.sh
args = en
args = env('nb')

# Step 2.2 (générique): Enregistrer le résultat et signaler que le traitement est fini
[fork/delegate]
file = recorder.cfg

# Step 3 : Renvoyer immédiatement un seul élément indiquant comment récupérer le résultat quand il sera prêt
[delegate]
file = recipient.cfg
